// Generated by rstantools.  Do not edit by hand.

/*
    siteBayes is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    siteBayes is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with siteBayes.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_rubin_normal2_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 93> locations_array__ =
  {" (found before start of program)",
  " (in 'rubin_normal2', line 90, column 2 to column 11)",
  " (in 'rubin_normal2', line 91, column 2 to column 26)",
  " (in 'rubin_normal2', line 92, column 2 to column 16)",
  " (in 'rubin_normal2', line 93, column 2 to column 18)",
  " (in 'rubin_normal2', line 97, column 2 to column 18)",
  " (in 'rubin_normal2', line 99, column 2 to column 17)",
  " (in 'rubin_normal2', line 126, column 2 to column 20)",
  " (in 'rubin_normal2', line 128, column 2 to column 27)",
  " (in 'rubin_normal2', line 130, column 2 to column 22)",
  " (in 'rubin_normal2', line 132, column 2 to column 31)",
  " (in 'rubin_normal2', line 133, column 2 to column 15)",
  " (in 'rubin_normal2', line 102, column 4 to column 40)",
  " (in 'rubin_normal2', line 101, column 17 to line 103, column 3)",
  " (in 'rubin_normal2', line 101, column 2 to line 103, column 3)",
  " (in 'rubin_normal2', line 108, column 4 to column 30)",
  " (in 'rubin_normal2', line 107, column 9 to line 109, column 3)",
  " (in 'rubin_normal2', line 106, column 4 to column 20)",
  " (in 'rubin_normal2', line 105, column 14 to line 107, column 3)",
  " (in 'rubin_normal2', line 105, column 2 to line 109, column 3)",
  " (in 'rubin_normal2', line 137, column 4 to column 73)",
  " (in 'rubin_normal2', line 139, column 4 to column 64)",
  " (in 'rubin_normal2', line 141, column 4 to column 59)",
  " (in 'rubin_normal2', line 143, column 4 to column 42)",
  " (in 'rubin_normal2', line 135, column 16 to line 144, column 3)",
  " (in 'rubin_normal2', line 135, column 2 to line 144, column 3)",
  " (in 'rubin_normal2', line 146, column 2 to column 27)",
  " (in 'rubin_normal2', line 147, column 2 to column 67)",
  " (in 'rubin_normal2', line 113, column 2 to column 65)",
  " (in 'rubin_normal2', line 115, column 2 to column 81)",
  " (in 'rubin_normal2', line 116, column 2 to column 79)",
  " (in 'rubin_normal2', line 118, column 2 to column 21)",
  " (in 'rubin_normal2', line 121, column 4 to column 55)",
  " (in 'rubin_normal2', line 120, column 17 to line 122, column 3)",
  " (in 'rubin_normal2', line 120, column 2 to line 122, column 3)",
  " (in 'rubin_normal2', line 72, column 2 to column 17)",
  " (in 'rubin_normal2', line 73, column 9 to column 10)",
  " (in 'rubin_normal2', line 73, column 2 to column 26)",
  " (in 'rubin_normal2', line 74, column 18 to column 19)",
  " (in 'rubin_normal2', line 74, column 2 to column 26)",
  " (in 'rubin_normal2', line 76, column 2 to column 18)",
  " (in 'rubin_normal2', line 77, column 9 to column 10)",
  " (in 'rubin_normal2', line 77, column 12 to column 14)",
  " (in 'rubin_normal2', line 77, column 2 to column 18)",
  " (in 'rubin_normal2', line 79, column 2 to column 26)",
  " (in 'rubin_normal2', line 80, column 2 to column 24)",
  " (in 'rubin_normal2', line 81, column 2 to column 21)",
  " (in 'rubin_normal2', line 82, column 2 to column 32)",
  " (in 'rubin_normal2', line 83, column 2 to column 30)",
  " (in 'rubin_normal2', line 84, column 2 to column 27)",
  " (in 'rubin_normal2', line 92, column 9 to column 10)",
  " (in 'rubin_normal2', line 93, column 9 to column 11)",
  " (in 'rubin_normal2', line 97, column 9 to column 10)",
  " (in 'rubin_normal2', line 99, column 9 to column 10)",
  " (in 'rubin_normal2', line 126, column 9 to column 10)",
  " (in 'rubin_normal2', line 128, column 9 to column 10)",
  " (in 'rubin_normal2', line 130, column 9 to column 10)",
  " (in 'rubin_normal2', line 43, column 6 to column 45)",
  " (in 'rubin_normal2', line 41, column 11 to line 44, column 5)",
  " (in 'rubin_normal2', line 40, column 6 to column 48)",
  " (in 'rubin_normal2', line 38, column 28 to line 41, column 5)",
  " (in 'rubin_normal2', line 38, column 11 to line 44, column 5)",
  " (in 'rubin_normal2', line 37, column 6 to column 47)",
  " (in 'rubin_normal2', line 34, column 28 to line 38, column 5)",
  " (in 'rubin_normal2', line 34, column 11 to line 44, column 5)",
  " (in 'rubin_normal2', line 33, column 6 to column 53)",
  " (in 'rubin_normal2', line 30, column 28 to line 34, column 5)",
  " (in 'rubin_normal2', line 30, column 11 to line 44, column 5)",
  " (in 'rubin_normal2', line 29, column 6 to column 50)",
  " (in 'rubin_normal2', line 27, column 28 to line 30, column 5)",
  " (in 'rubin_normal2', line 27, column 11 to line 44, column 5)",
  " (in 'rubin_normal2', line 26, column 6 to column 59)",
  " (in 'rubin_normal2', line 24, column 28 to line 27, column 5)",
  " (in 'rubin_normal2', line 24, column 11 to line 44, column 5)",
  " (in 'rubin_normal2', line 23, column 6 to column 47)",
  " (in 'rubin_normal2', line 21, column 28 to line 24, column 5)",
  " (in 'rubin_normal2', line 21, column 11 to line 44, column 5)",
  " (in 'rubin_normal2', line 20, column 6 to column 47)",
  " (in 'rubin_normal2', line 18, column 21 to line 21, column 5)",
  " (in 'rubin_normal2', line 18, column 4 to line 44, column 5)",
  " (in 'rubin_normal2', line 5, column 55 to line 45, column 3)",
  " (in 'rubin_normal2', line 66, column 6 to column 39)",
  " (in 'rubin_normal2', line 64, column 11 to line 67, column 5)",
  " (in 'rubin_normal2', line 63, column 6 to column 39)",
  " (in 'rubin_normal2', line 60, column 28 to line 64, column 5)",
  " (in 'rubin_normal2', line 60, column 11 to line 67, column 5)",
  " (in 'rubin_normal2', line 59, column 6 to column 59)",
  " (in 'rubin_normal2', line 57, column 28 to line 60, column 5)",
  " (in 'rubin_normal2', line 57, column 11 to line 67, column 5)",
  " (in 'rubin_normal2', line 56, column 6 to column 47)",
  " (in 'rubin_normal2', line 54, column 21 to line 57, column 5)",
  " (in 'rubin_normal2', line 54, column 4 to line 67, column 5)",
  " (in 'rubin_normal2', line 49, column 56 to line 68, column 3)"};
template <bool propto__, typename T0__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
stan::promote_args_t<T0__, stan::base_type_t<T2__>>
realprior_lpdf(const T0__& x, const int& family, const T2__& pars_arg__,
               std::ostream* pstream__);
template <bool propto__, typename T0__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T2__>>
vecprior_lpdf(const T0__& v_arg__, const int& family, const T2__& pars_arg__,
              std::ostream* pstream__);
template <bool propto__, typename T0__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
stan::promote_args_t<T0__, stan::base_type_t<T2__>>
realprior_lpdf(const T0__& x, const int& family, const T2__& pars_arg__,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& pars = stan::math::to_ref(pars_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 79;
    if (stan::math::logical_eq(family, 1)) {
      current_statement__ = 77;
      return stan::math::normal_lpdf<false>(x,
               stan::model::rvalue(pars, "pars", stan::model::index_uni(1)),
               stan::model::rvalue(pars, "pars", stan::model::index_uni(2)));
    } else {
      current_statement__ = 76;
      if (stan::math::logical_eq(family, 2)) {
        current_statement__ = 74;
        return stan::math::cauchy_lpdf<false>(x,
                 stan::model::rvalue(pars, "pars", stan::model::index_uni(1)),
                 stan::model::rvalue(pars, "pars", stan::model::index_uni(2)));
      } else {
        current_statement__ = 73;
        if (stan::math::logical_eq(family, 3)) {
          current_statement__ = 71;
          return stan::math::student_t_lpdf<false>(x,
                   stan::model::rvalue(pars, "pars",
                     stan::model::index_uni(1)),
                   stan::model::rvalue(pars, "pars",
                     stan::model::index_uni(2)),
                   stan::model::rvalue(pars, "pars",
                     stan::model::index_uni(3)));
        } else {
          current_statement__ = 70;
          if (stan::math::logical_eq(family, 5)) {
            current_statement__ = 68;
            return stan::math::lognormal_lpdf<false>(x,
                     stan::model::rvalue(pars, "pars",
                       stan::model::index_uni(1)),
                     stan::model::rvalue(pars, "pars",
                       stan::model::index_uni(2)));
          } else {
            current_statement__ = 67;
            if (stan::math::logical_eq(family, 6)) {
              current_statement__ = 65;
              return stan::math::student_t_lpdf<false>(x,
                       stan::model::rvalue(pars, "pars",
                         stan::model::index_uni(1)), 0,
                       stan::model::rvalue(pars, "pars",
                         stan::model::index_uni(2)));
            } else {
              current_statement__ = 64;
              if (stan::math::logical_eq(family, 7)) {
                current_statement__ = 62;
                return stan::math::cauchy_lpdf<false>(x,
                         stan::model::rvalue(pars, "pars",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(pars, "pars",
                           stan::model::index_uni(2)));
              } else {
                current_statement__ = 61;
                if (stan::math::logical_eq(family, 0)) {
                  current_statement__ = 59;
                  return stan::math::uniform_lpdf<false>(x,
                           stan::model::rvalue(pars, "pars",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(pars, "pars",
                             stan::model::index_uni(2)));
                } else {
                  current_statement__ = 57;
                  return stan::math::uniform_lpdf<false>(x, -1.0e6, 1.0e6);
                }
              }
            }
          }
        }
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <bool propto__, typename T0__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T2__>>
vecprior_lpdf(const T0__& v_arg__, const int& family, const T2__& pars_arg__,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& v = stan::math::to_ref(v_arg__);
  const auto& pars = stan::math::to_ref(pars_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 91;
    if (stan::math::logical_eq(family, 1)) {
      current_statement__ = 89;
      return stan::math::normal_lpdf<false>(v,
               stan::model::rvalue(pars, "pars", stan::model::index_uni(1)),
               stan::model::rvalue(pars, "pars", stan::model::index_uni(2)));
    } else {
      current_statement__ = 88;
      if (stan::math::logical_eq(family, 3)) {
        current_statement__ = 86;
        return stan::math::student_t_lpdf<false>(v,
                 stan::model::rvalue(pars, "pars", stan::model::index_uni(1)),
                 stan::model::rvalue(pars, "pars", stan::model::index_uni(2)),
                 stan::model::rvalue(pars, "pars", stan::model::index_uni(3)));
      } else {
        current_statement__ = 85;
        if (stan::math::logical_eq(family, 0)) {
          current_statement__ = 83;
          return stan::math::normal_lpdf<false>(v, 0, 1.0e4);
        } else {
          current_statement__ = 81;
          return stan::math::normal_lpdf<false>(v, 0, 1.0e4);
        }
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_rubin_normal2 final : public model_base_crtp<model_rubin_normal2> {
private:
  int J;
  Eigen::Matrix<double,-1,1> tau_hat_j_data__;
  Eigen::Matrix<double,-1,1> se_j_data__;
  int Nc;
  Eigen::Matrix<double,-1,-1> X_data__;
  int prior_hypermean_fam;
  int prior_hypersd_fam;
  int prior_beta_fam;
  Eigen::Matrix<double,-1,1> prior_hypermean_val_data__;
  Eigen::Matrix<double,-1,1> prior_hypersd_val_data__;
  Eigen::Matrix<double,-1,1> prior_beta_val_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> tau_hat_j{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> se_j{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_hypermean_val{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_hypersd_val{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_beta_val{nullptr, 0};
public:
  ~model_rubin_normal2() {}
  model_rubin_normal2(stan::io::var_context& context__, unsigned int
                      random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_rubin_normal2_namespace::model_rubin_normal2";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 35;
      context__.validate_dims("data initialization", "J", "int",
        std::vector<size_t>{});
      J = std::numeric_limits<int>::min();
      current_statement__ = 35;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "J", J, 0);
      current_statement__ = 36;
      stan::math::validate_non_negative_index("tau_hat_j", "J", J);
      current_statement__ = 37;
      context__.validate_dims("data initialization", "tau_hat_j", "double",
        std::vector<size_t>{static_cast<size_t>(J)});
      tau_hat_j_data__ = Eigen::Matrix<double,-1,1>::Constant(J,
                           std::numeric_limits<double>::quiet_NaN());
      new (&tau_hat_j)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(tau_hat_j_data__.data(), J);
      {
        std::vector<local_scalar_t__> tau_hat_j_flat__;
        current_statement__ = 37;
        tau_hat_j_flat__ = context__.vals_r("tau_hat_j");
        current_statement__ = 37;
        pos__ = 1;
        current_statement__ = 37;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 37;
          stan::model::assign(tau_hat_j, tau_hat_j_flat__[(pos__ - 1)],
            "assigning variable tau_hat_j", stan::model::index_uni(sym1__));
          current_statement__ = 37;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 38;
      stan::math::validate_non_negative_index("se_j", "J", J);
      current_statement__ = 39;
      context__.validate_dims("data initialization", "se_j", "double",
        std::vector<size_t>{static_cast<size_t>(J)});
      se_j_data__ = Eigen::Matrix<double,-1,1>::Constant(J,
                      std::numeric_limits<double>::quiet_NaN());
      new (&se_j) Eigen::Map<Eigen::Matrix<double,-1,1>>(se_j_data__.data(),
        J);
      {
        std::vector<local_scalar_t__> se_j_flat__;
        current_statement__ = 39;
        se_j_flat__ = context__.vals_r("se_j");
        current_statement__ = 39;
        pos__ = 1;
        current_statement__ = 39;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 39;
          stan::model::assign(se_j, se_j_flat__[(pos__ - 1)],
            "assigning variable se_j", stan::model::index_uni(sym1__));
          current_statement__ = 39;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 39;
      stan::math::check_greater_or_equal(function__, "se_j", se_j, 0);
      current_statement__ = 40;
      context__.validate_dims("data initialization", "Nc", "int",
        std::vector<size_t>{});
      Nc = std::numeric_limits<int>::min();
      current_statement__ = 40;
      Nc = context__.vals_i("Nc")[(1 - 1)];
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "Nc", Nc, 0);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("X", "J", J);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("X", "Nc", Nc);
      current_statement__ = 43;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(J), static_cast<size_t>(Nc)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(J, Nc,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), J,
        Nc);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 43;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 43;
        pos__ = 1;
        current_statement__ = 43;
        for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
          current_statement__ = 43;
          for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
            current_statement__ = 43;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 43;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 44;
      context__.validate_dims("data initialization", "prior_hypermean_fam",
        "int", std::vector<size_t>{});
      prior_hypermean_fam = std::numeric_limits<int>::min();
      current_statement__ = 44;
      prior_hypermean_fam = context__.vals_i("prior_hypermean_fam")[(1 - 1)];
      current_statement__ = 45;
      context__.validate_dims("data initialization", "prior_hypersd_fam",
        "int", std::vector<size_t>{});
      prior_hypersd_fam = std::numeric_limits<int>::min();
      current_statement__ = 45;
      prior_hypersd_fam = context__.vals_i("prior_hypersd_fam")[(1 - 1)];
      current_statement__ = 46;
      context__.validate_dims("data initialization", "prior_beta_fam", "int",
        std::vector<size_t>{});
      prior_beta_fam = std::numeric_limits<int>::min();
      current_statement__ = 46;
      prior_beta_fam = context__.vals_i("prior_beta_fam")[(1 - 1)];
      current_statement__ = 47;
      context__.validate_dims("data initialization", "prior_hypermean_val",
        "double", std::vector<size_t>{static_cast<size_t>(3)});
      prior_hypermean_val_data__ = Eigen::Matrix<double,-1,1>::Constant(3,
                                     std::numeric_limits<double>::quiet_NaN());
      new (&prior_hypermean_val)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_hypermean_val_data__.data(),
        3);
      {
        std::vector<local_scalar_t__> prior_hypermean_val_flat__;
        current_statement__ = 47;
        prior_hypermean_val_flat__ = context__.vals_r("prior_hypermean_val");
        current_statement__ = 47;
        pos__ = 1;
        current_statement__ = 47;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 47;
          stan::model::assign(prior_hypermean_val,
            prior_hypermean_val_flat__[(pos__ - 1)],
            "assigning variable prior_hypermean_val",
            stan::model::index_uni(sym1__));
          current_statement__ = 47;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 48;
      context__.validate_dims("data initialization", "prior_hypersd_val",
        "double", std::vector<size_t>{static_cast<size_t>(3)});
      prior_hypersd_val_data__ = Eigen::Matrix<double,-1,1>::Constant(3,
                                   std::numeric_limits<double>::quiet_NaN());
      new (&prior_hypersd_val)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_hypersd_val_data__.data(),
        3);
      {
        std::vector<local_scalar_t__> prior_hypersd_val_flat__;
        current_statement__ = 48;
        prior_hypersd_val_flat__ = context__.vals_r("prior_hypersd_val");
        current_statement__ = 48;
        pos__ = 1;
        current_statement__ = 48;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 48;
          stan::model::assign(prior_hypersd_val,
            prior_hypersd_val_flat__[(pos__ - 1)],
            "assigning variable prior_hypersd_val",
            stan::model::index_uni(sym1__));
          current_statement__ = 48;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 49;
      context__.validate_dims("data initialization", "prior_beta_val",
        "double", std::vector<size_t>{static_cast<size_t>(3)});
      prior_beta_val_data__ = Eigen::Matrix<double,-1,1>::Constant(3,
                                std::numeric_limits<double>::quiet_NaN());
      new (&prior_beta_val)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_beta_val_data__.data(),
        3);
      {
        std::vector<local_scalar_t__> prior_beta_val_flat__;
        current_statement__ = 49;
        prior_beta_val_flat__ = context__.vals_r("prior_beta_val");
        current_statement__ = 49;
        pos__ = 1;
        current_statement__ = 49;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 49;
          stan::model::assign(prior_beta_val, prior_beta_val_flat__[(pos__ -
            1)], "assigning variable prior_beta_val",
            stan::model::index_uni(sym1__));
          current_statement__ = 49;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 50;
      stan::math::validate_non_negative_index("eta", "J", J);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("beta", "Nc", Nc);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("tau_j", "J", J);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("fe_j", "J", J);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("log_lik", "J", J);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("posterior_pred", "J", J);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("shrinkage", "J", J);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + J + Nc;
  }
  inline std::string model_name() const final {
    return "model_rubin_normal2";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_rubin_normal2_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ tau = DUMMY_VAR__;
      current_statement__ = 1;
      tau = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma_tau = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_tau = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 3;
      eta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(J);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nc, DUMMY_VAR__);
      current_statement__ = 4;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(Nc);
      Eigen::Matrix<local_scalar_t__,-1,1> tau_j =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> fe_j =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 14;
      for (int j = 1; j <= J; ++j) {
        current_statement__ = 12;
        stan::model::assign(tau_j, (tau + (sigma_tau *
          stan::model::rvalue(eta, "eta", stan::model::index_uni(j)))),
          "assigning variable tau_j", stan::model::index_uni(j));
      }
      current_statement__ = 19;
      if (stan::math::logical_gt(Nc, 0)) {
        current_statement__ = 17;
        stan::model::assign(fe_j, stan::math::multiply(X, beta),
          "assigning variable fe_j");
      } else {
        current_statement__ = 15;
        stan::model::assign(fe_j, stan::math::rep_vector(0.0, J),
          "assigning variable fe_j");
      }
      {
        current_statement__ = 28;
        lp_accum__.add(vecprior_lpdf<false>(beta, prior_beta_fam,
                         prior_beta_val, pstream__));
        current_statement__ = 29;
        lp_accum__.add(realprior_lpdf<false>(tau, prior_hypermean_fam,
                         prior_hypermean_val, pstream__));
        current_statement__ = 30;
        lp_accum__.add(realprior_lpdf<false>(sigma_tau, prior_hypersd_fam,
                         prior_hypersd_val, pstream__));
        current_statement__ = 31;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(eta, 0, 1));
        current_statement__ = 34;
        for (int j = 1; j <= J; ++j) {
          current_statement__ = 32;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(tau_hat_j, "tau_hat_j",
                             stan::model::index_uni(j)),
                           (stan::model::rvalue(tau_j, "tau_j",
                              stan::model::index_uni(j)) +
                           stan::model::rvalue(fe_j, "fe_j",
                             stan::model::index_uni(j))),
                           stan::model::rvalue(se_j, "se_j",
                             stan::model::index_uni(j))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_rubin_normal2_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double tau = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      tau = in__.template read<local_scalar_t__>();
      double sigma_tau = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sigma_tau = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,1> eta =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      eta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(J);
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(Nc,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(Nc);
      Eigen::Matrix<double,-1,1> tau_j =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> fe_j =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(tau);
      out__.write(sigma_tau);
      out__.write(eta);
      out__.write(beta);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 14;
      for (int j = 1; j <= J; ++j) {
        current_statement__ = 12;
        stan::model::assign(tau_j, (tau + (sigma_tau *
          stan::model::rvalue(eta, "eta", stan::model::index_uni(j)))),
          "assigning variable tau_j", stan::model::index_uni(j));
      }
      current_statement__ = 19;
      if (stan::math::logical_gt(Nc, 0)) {
        current_statement__ = 17;
        stan::model::assign(fe_j, stan::math::multiply(X, beta),
          "assigning variable fe_j");
      } else {
        current_statement__ = 15;
        stan::model::assign(fe_j, stan::math::rep_vector(0.0, J),
          "assigning variable fe_j");
      }
      if (emit_transformed_parameters__) {
        out__.write(tau_j);
        out__.write(fe_j);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> posterior_pred =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> shrinkage =
        Eigen::Matrix<double,-1,1>::Constant(J,
          std::numeric_limits<double>::quiet_NaN());
      double log_se_squared_mean = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      log_se_squared_mean = 0;
      double I_level = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 25;
      for (int j = 1; j <= J; ++j) {
        current_statement__ = 20;
        stan::model::assign(log_lik,
          stan::math::normal_lpdf<false>(
            stan::model::rvalue(tau_hat_j, "tau_hat_j",
              stan::model::index_uni(j)),
            (stan::model::rvalue(tau_j, "tau_j", stan::model::index_uni(j)) +
            stan::model::rvalue(fe_j, "fe_j", stan::model::index_uni(j))),
            stan::model::rvalue(se_j, "se_j", stan::model::index_uni(j))),
          "assigning variable log_lik", stan::model::index_uni(j));
        current_statement__ = 21;
        stan::model::assign(posterior_pred,
          stan::math::normal_rng(
            (stan::model::rvalue(tau_j, "tau_j", stan::model::index_uni(j)) +
            stan::model::rvalue(fe_j, "fe_j", stan::model::index_uni(j))),
            stan::model::rvalue(se_j, "se_j", stan::model::index_uni(j)),
            base_rng__), "assigning variable posterior_pred",
          stan::model::index_uni(j));
        current_statement__ = 22;
        stan::model::assign(shrinkage, (stan::math::pow(sigma_tau, 2) /
          (stan::math::pow(sigma_tau, 2) +
          stan::math::pow(
            stan::model::rvalue(se_j, "se_j", stan::model::index_uni(j)), 2))),
          "assigning variable shrinkage", stan::model::index_uni(j));
        current_statement__ = 23;
        log_se_squared_mean = (log_se_squared_mean +
          stan::math::log(
            stan::math::pow(
              stan::model::rvalue(se_j, "se_j", stan::model::index_uni(j)), 2)));
      }
      current_statement__ = 26;
      log_se_squared_mean = (log_se_squared_mean / J);
      current_statement__ = 27;
      I_level = (stan::math::pow(sigma_tau, 2) /
        (stan::math::pow(sigma_tau, 2) +
        stan::math::exp(log_se_squared_mean)));
      out__.write(log_lik);
      out__.write(posterior_pred);
      out__.write(shrinkage);
      out__.write(log_se_squared_mean);
      out__.write(I_level);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ tau = DUMMY_VAR__;
      current_statement__ = 1;
      tau = in__.read<local_scalar_t__>();
      out__.write(tau);
      local_scalar_t__ sigma_tau = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_tau = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_tau);
      Eigen::Matrix<local_scalar_t__,-1,1> eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(eta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(J),
        "assigning variable eta");
      out__.write(eta);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nc, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(Nc),
        "assigning variable beta");
      out__.write(beta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "tau", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sigma_tau",
        "double", std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "eta", "double",
        std::vector<size_t>{static_cast<size_t>(J)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(Nc)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ tau = DUMMY_VAR__;
      current_statement__ = 1;
      tau = context__.vals_r("tau")[(1 - 1)];
      out__.write(tau);
      local_scalar_t__ sigma_tau = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_tau = context__.vals_r("sigma_tau")[(1 - 1)];
      out__.write_free_lb(0, sigma_tau);
      Eigen::Matrix<local_scalar_t__,-1,1> eta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(J, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> eta_flat__;
        current_statement__ = 3;
        eta_flat__ = context__.vals_r("eta");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(eta, eta_flat__[(pos__ - 1)],
            "assigning variable eta", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(eta);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(Nc, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 4;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"tau", "sigma_tau", "eta", "beta"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"tau_j", "fe_j"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"log_lik", "posterior_pred", "shrinkage", "log_se_squared_mean",
             "I_level"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(J)},
                std::vector<size_t>{static_cast<size_t>(Nc)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(J)},
             std::vector<size_t>{static_cast<size_t>(J)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(J)},
             std::vector<size_t>{static_cast<size_t>(J)},
             std::vector<size_t>{static_cast<size_t>(J)},
             std::vector<size_t>{}, std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "tau");
    param_names__.emplace_back(std::string() + "sigma_tau");
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "eta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "tau_j" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "fe_j" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "posterior_pred" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "shrinkage" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "log_se_squared_mean");
      param_names__.emplace_back(std::string() + "I_level");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "tau");
    param_names__.emplace_back(std::string() + "sigma_tau");
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      param_names__.emplace_back(std::string() + "eta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= Nc; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "tau_j" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "fe_j" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "posterior_pred" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        param_names__.emplace_back(std::string() + "shrinkage" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "log_se_squared_mean");
      param_names__.emplace_back(std::string() + "I_level");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nc) + "},\"block\":\"parameters\"},{\"name\":\"tau_j\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fe_j\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"generated_quantities\"},{\"name\":\"posterior_pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"generated_quantities\"},{\"name\":\"shrinkage\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_se_squared_mean\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"I_level\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nc) + "},\"block\":\"parameters\"},{\"name\":\"tau_j\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"fe_j\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"generated_quantities\"},{\"name\":\"posterior_pred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"generated_quantities\"},{\"name\":\"shrinkage\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_se_squared_mean\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"I_level\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + 1) + J) + Nc);
    const size_t num_transformed = emit_transformed_parameters * ((J + J));
    const size_t num_gen_quantities = emit_generated_quantities * (((((J + J)
      + J) + 1) + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + 1) + J) + Nc);
    const size_t num_transformed = emit_transformed_parameters * ((J + J));
    const size_t num_gen_quantities = emit_generated_quantities * (((((J + J)
      + J) + 1) + 1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_rubin_normal2_namespace::model_rubin_normal2;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_rubin_normal2_namespace::profiles__;
}
#endif
#endif
