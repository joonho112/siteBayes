% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sim_observed_effects_copula.R
\name{sim_observed_effects_copula}
\alias{sim_observed_effects_copula}
\title{Copula-based approach to simulate observed effects with optional Pearson correlation}
\usage{
sim_observed_effects_copula(
  tau_j,
  se2_j,
  precision_dependence = FALSE,
  pearson_corr = 0.5,
  seed = NULL
)
}
\arguments{
\item{tau_j}{Numeric vector of length J (the "true" site effects).}

\item{se2_j}{Numeric vector of length J (the within-site sampling variances).}

\item{precision_dependence}{Logical: if \code{TRUE}, enforce a correlation structure
via a Gaussian copula. If \code{FALSE}, we simply random-shuffle \code{se2_j},
aiming for near-zero correlation.}

\item{pearson_corr}{Numeric in \link{-1,1}, the desired correlation in the \emph{Gaussian copula}
space. Defaults to 0.5. Note that for heavily skewed or discrete-like data,
the actual Pearson correlation \code{cor(tau_j, se2_j)} in the final dataset
may not be \emph{exactly} \code{pearson_corr}, but typically it will be close.}

\item{seed}{Optional integer for reproducibility. If not \code{NULL}, \code{set.seed(seed)} is called
at the start of this function.}
}
\value{
A tibble with columns:
\describe{
\item{\code{tau_j}}{The original \(\tau_j\), unchanged.}
\item{\code{se2_j}}{The updated \(\mathrm{se2}_j\), either random-shuffled
(if \code{precision_dependence=FALSE}) or derived via copula
(if \code{precision_dependence=TRUE}). The marginal distribution
remains the same as the original \(\mathrm{se2}_j\) (empirical).}
\item{\code{tau_j_hat}}{Simulated observed effects, drawn from
\(\mathcal{N}(\tau_j, \mathrm{se2}_j)\).}
\item{\code{corr_est}}{The final Pearson correlation \code{cor(tau_j, se2_j)}
in the output dataset.}
}
}
\description{
This function takes user-supplied vectors of \emph{true} site effects (\(\tau_j\))
and site-level sampling variances (\(\mathrm{se2}_j\)), then optionally reorders
or re-generates \(\mathrm{se2}_j\) via a Gaussian copula approach so that
the final (\(\tau_j\), \(\mathrm{se2}_j\)) has a specified Pearson correlation
(\code{pearson_corr}) in the \emph{standard-normal (copula)} transform space.
}
\details{
\itemize{
\item If \code{precision_dependence = FALSE}, we shuffle \code{se2_j} randomly
(via \code{sample()}) to break most existing correlation. The resulting
correlation is typically near zero, but not guaranteed to be exactly zero.
\item If \code{precision_dependence = TRUE}, we apply the standard copula logic:
(1) convert \(\tau_j\) and \(\mathrm{se2}_j\) to normal \code{z}-scores via
rank \(\to\) percentile \(\to\) \code{qnorm}; (2) impose a linear correlation
\code{pearson_corr} in \code{z}-space; (3) map back to the empirical distribution
of \(\mathrm{se2}_j\). This preserves the marginal distribution of each vector
while creating an approximate Pearson correlation in the final dataset.
\item Ties are broken randomly (\code{ties.method="random"}) for rank calculations.
For data with many identical values, results might vary slightly.
}
}
\examples{
\dontrun{
  set.seed(101)
  J <- 50
  tau_vec <- rnorm(J, 2, 1)
  se2_vec <- rgamma(J, shape=2, rate=4)

  # 1) No correlation (just random shuffle)
  df_nocorr <- sim_observed_effects_copula(tau_vec, se2_vec,
      precision_dependence = FALSE)
  cor(df_nocorr$tau_j, df_nocorr$se2_j)  # near zero (not exact)

  # 2) Copula approach => target ~0.5 correlation in normal space
  df_corr <- sim_observed_effects_copula(tau_vec, se2_vec,
      precision_dependence = TRUE, pearson_corr = 0.5)
  cor(df_corr$tau_j, df_corr$se2_j)      # check actual correlation
}

}
