% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_prep_rubin_normal.R
\name{build_standata_rubin_normal}
\alias{build_standata_rubin_normal}
\title{Build Stan data list for rubin_normal.stan (auto priors by default)}
\usage{
build_standata_rubin_normal(
  df,
  tau_hat_col = "tau_j_hat",
  se2_col = "se2_hat",
  covariates = NULL,
  prior_hypermean = NULL,
  prior_hypersd = NULL,
  prior_beta = NULL,
  auto_prior = TRUE
)
}
\arguments{
\item{df}{A data frame containing at least the columns \code{tau_hat_col} and
\code{se2_col}, and optionally some covariates.}

\item{tau_hat_col}{Name of the column with site-level effect estimates
(defaults to \code{"tau_j_hat"}).}

\item{se2_col}{Name of the column with squared standard errors
(defaults to \code{"se2_hat"}).}

\item{covariates}{Character vector of covariate column names, or \code{NULL} if none.}

\item{prior_hypermean}{A prior object for the hyper-mean \(\mu\). If \code{NULL},
it will be set automatically if \code{auto_prior=TRUE}, or to
\code{normal_prior(0, 10)} otherwise.}

\item{prior_hypersd}{A prior object for the hyper-SD \(\tau\). If \code{NULL},
it will be set automatically if \code{auto_prior=TRUE}, or to
\code{half_student_t_prior(df=3, scale=2)} otherwise.}

\item{prior_beta}{A prior object for covariate effects \(\beta\). If \code{NULL},
it will be set automatically if \code{auto_prior=TRUE}, or to
\code{normal_prior(0, 10)} otherwise.}

\item{auto_prior}{Logical indicating whether to use data-dependent priors by default
(baggr style). Defaults to \code{TRUE}.}
}
\value{
A named list ready to pass to Stan, with the elements:
\itemize{
\item \code{J, tau_hat_j, se_j, Nc, X} (the data),
\item \code{prior_hypermean_fam}, \code{prior_hypermean_val},
\code{prior_hypersd_fam},   \code{prior_hypersd_val},
\code{prior_beta_fam},      \code{prior_beta_val}.
}
}
\description{
This function returns a list suitable for \code{rstan::sampling(...)}
with the Rubin Normal model. It expects a data frame containing site-level
effect estimates (\code{tau_hat_col}) and squared standard errors (\code{se2_col}),
plus optional covariates.
}
\details{
By default, \code{auto_prior = TRUE}, and all three prior arguments
(\code{prior_hypermean}, \code{prior_hypersd}, \code{prior_beta})
are \code{NULL}. In that scenario, the function will automatically
generate data-dependent priors for each parameter using
\code{\link{auto_prior_rubin_normal}()} (baggr-style).

If you provide a manual prior for some parameter(s), those override
the auto priors for that portion only. If you set \code{auto_prior = FALSE},
then any \code{NULL} prior argument reverts to a simple default
(e.g. \code{normal_prior(0, 10)}, \code{half_student_t_prior(df=3, scale=2)})
as in the earlier behavior.
}
\examples{
\dontrun{
# Example data
df_with_cov <- data.frame(
  tau_j_hat = c(0.1, 0.3, -0.2),
  se2_hat   = c(0.01, 0.02, 0.03),
  X1        = c(1, 2, 1)
)

# 1) Default usage (auto_prior=TRUE, all priors=NULL => auto priors for everything)
standata_auto <- build_standata_rubin_normal(
  df          = df_with_cov,
  tau_hat_col = "tau_j_hat",
  se2_col     = "se2_hat",
  covariates  = "X1"
)

# 2) If you want to override just one of them, e.g. prior_hypersd:
my_prior_sd <- half_student_t_prior(df=4, scale=1.5)
standata_mixed <- build_standata_rubin_normal(
  df             = df_with_cov,
  tau_hat_col    = "tau_j_hat",
  se2_col        = "se2_hat",
  covariates     = "X1",
  prior_hypersd  = my_prior_sd  # user override for hyper-SD
)

# 3) auto_prior=FALSE => anything left as NULL uses the simpler defaults (normal(0,10), etc.)
standata_manual <- build_standata_rubin_normal(
  df          = df_with_cov,
  tau_hat_col = "tau_j_hat",
  se2_col     = "se2_hat",
  covariates  = "X1",
  auto_prior  = FALSE
  # => prior_hypermean=NULL => normal(0,10)
  #    prior_hypersd=NULL   => half_student_t_prior(3,2)
  #    prior_beta=NULL      => normal(0,10)
)
}

}
