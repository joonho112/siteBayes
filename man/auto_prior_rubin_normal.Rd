% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prior_rubin_normal.R
\name{auto_prior_rubin_normal}
\alias{auto_prior_rubin_normal}
\title{Generate data-dependent priors for Rubin Normal model (baggr-style), including se2_col checks}
\usage{
auto_prior_rubin_normal(
  df,
  tau_hat_col = "tau_j_hat",
  se2_col = "se2_hat",
  covariates = NULL
)
}
\arguments{
\item{df}{A data frame containing columns for site-level effects and their squared standard errors}

\item{tau_hat_col}{Character name of the column for observed site-level effects \(\tau_j\).
Defaults to \code{"tau_j_hat"}.}

\item{se2_col}{Character name of the column for squared standard errors. Defaults to \code{"se2_hat"}.
It is checked for existence but not otherwise used in prior calculations.}

\item{covariates}{Character vector of covariate column names, or \code{NULL} if none.}
}
\value{
A named list with three elements:
\itemize{
\item \code{hypermean}: Prior object for the hypermean \(\mu\).
\item \code{hypersd}:   Prior object for the hyper-SD \(\tau\).
\item \code{beta}:      Prior object for covariate effects.
}
}
\description{
This function examines the site-level effect estimates (\code{tau_hat_col}) in \code{df},
and optionally any covariates (\code{covariates}), to produce three prior objects:
\code{hypermean}, \code{hypersd}, and \code{beta}. The resulting list can be supplied to
\code{\link{prepare_prior_settings_rubin_normal}()} or \code{\link{build_standata_rubin_normal}()}.
}
\details{
The logic here is adapted from the baggr package (for the "rubin" model):
\itemize{
\item \code{hypermean} (\(\mu\)) = \(\text{Normal}(0,\;10 \times \max|\tau_j|)\)
\item \code{hypersd} (\(\tau\)) = \(\text{Uniform}(0,\;10 \times \mathrm{sd}(\tau_j))\)
(if \code{J>1}). If there is only one site, a placeholder (\(\text{Normal}(0,1)\)) is used.
\item \code{beta} (covariate effects) = \(\text{Normal}(0,\;10 \times \max \mathrm{sd}(\mathbf{X}))\)
if covariates are present, or \(\text{Uniform}(0,1)\) if none.
}

Although this function also checks for \code{se2_col}, it does not incorporate the
squared standard errors into the automatic prior logic here (consistent with baggr).
}
\examples{
\dontrun{
# Example data frame with site-level effects and squared SE, plus one covariate
df_example <- data.frame(
  tau_j_hat = c(0.10, 0.30, -0.20, 0.00),
  se2_hat   = c(0.01, 0.02, 0.015, 0.005),
  X1        = c(1.2, 0.9, 1.1, 1.3)
)

# Generate data-dependent priors
auto_priors <- auto_prior_rubin_normal(
  df          = df_example,
  tau_hat_col = "tau_j_hat",
  se2_col     = "se2_hat",
  covariates  = "X1"
)
str(auto_priors)

# Then pass them to build_standata_rubin_normal (for instance):
standata <- build_standata_rubin_normal(
  df              = df_example,
  tau_hat_col     = "tau_j_hat",
  se2_col         = "se2_hat",
  covariates      = "X1",
  prior_hypermean = auto_priors$hypermean,
  prior_hypersd   = auto_priors$hypersd,
  prior_beta      = auto_priors$beta
)

# Now 'standata' is ready for rstan::sampling(...)
}

}
